version: '3.4'
services:

#  db:
#    restart: always
#    image: postgres:9.6-alpine
#    networks:
#      - internal_network
#    healthcheck:
#      test: ["CMD", "pg_isready", "-U", "postgres"]
#    volumes:
#      - ./postgres:/var/lib/postgresql/data

#  redis:
#    restart: always
#    image: redis:4.0-alpine
#    networks:
#      - internal_network
#    healthcheck:
#      test: ["CMD", "redis-cli", "ping"]
#    volumes:
#      - /data
#    deploy:
#      placement:
#        constraints:
#          - node.role == worker

#  es:
#    restart: always
#    image: docker.elastic.co/elasticsearch/elasticsearch-oss:6.1.3
#    environment:
#      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
#    networks:
#      - internal_network
#    healthcheck:
#      test: ["CMD-SHELL", "curl --silent --fail localhost:9200/_cluster/health || exit 1"]
#    volumes:
#      - ./elasticsearch:/usr/share/elasticsearch/data

  web:
    #build: .
    image: tootsuite/mastodon:edge
    restart: always
    env_file: .env.production
    command: bash -c "rm -f /mastodon/tmp/pids/server.pid; bundle exec rails s -p 3000 -b '0.0.0.0'"
    networks:
      - external_network
      - internal_network
    healthcheck:
      #test: ["CMD-SHELL", "/usr/bin/env wget -q --spider --header 'x-forwarded-proto: https' --proxy off localhost:3000/api/v1/instance || exit 1"]
      test: ["CMD-SHELL", "/usr/bin/env wget -O - --header 'x-forwarded-proto: https' localhost:3000/api/v1/instance || exit 1"]
      #test: ["CMD-SHELL", "true"]
      #ports:
      #  - "127.0.0.1:3000:3000"
      #  - 3000
      #depends_on:
#      - db
#- redis
#      - es
    volumes:
      - /mastodon/public/system
    deploy:
      mode: replicated
      replicas: 2
      update_config:
        parallelism: 1
        delay: 30s
        order: start-first
      placement:
        constraints:
          - node.role == worker

  streaming:
    #build: .
    image: tootsuite/mastodon:edge
    #image: tootsuite/mastodon:latest
    restart: always
    env_file: .env.production
    #environment:
    #  - LOG_LEVEL=silly
    command: yarn start
    networks:
      - external_network
      - internal_network
    healthcheck:
      #test: ["CMD-SHELL", "wget -q --spider --header 'x-forwarded-proto: https' --proxy off localhost:4000/api/v1/streaming/health || exit 1"]
      test: ["CMD-SHELL", "wget -O - --header 'x-forwarded-proto: https' localhost:4000/api/v1/streaming/health || exit 1"]
      #test: ["CMD-SHELL", "true"]
      #ports:
      #- "127.0.0.1:4000:4000"
      #- 4000
    depends_on:
#      - db
      - redis
    deploy:
      mode: replicated
      replicas: 1
      update_config:
        parallelism: 1
        delay: 30s
        order: start-first
      placement:
        constraints:
          - node.role == worker

  sidekiq:
    #build: .
    image: tootsuite/mastodon:edge
    command: bundle exec sidekiq -c 15 -q default -q mailers -q push -q pull
    restart: always
    env_file: .env.production
    depends_on:
#      - db
      - redis
    networks:
      - external_network
      - internal_network
    volumes:
      - /mastodon/public/system
    deploy:
      mode: replicated
      replicas: 3
      update_config:
        parallelism: 1
        delay: 30s
        order: start-first
      placement:
        constraints:
          - node.role == worker

## Uncomment to enable federation with tor instances along with adding the following ENV variables
## http_proxy=http://privoxy:8118
## ALLOW_ACCESS_TO_HIDDEN_SERVICE=true
#  tor:
#    build: https://github.com/usbsnowcrash/docker-tor.git
#    networks:
#      - external_network
#      - internal_network
#
#  privoxy:
#    build: https://github.com/usbsnowcrash/docker-privoxy.git
#    command: /opt/sbin/privoxy --no-daemon --user privoxy.privoxy /opt/config
#    volumes:
#      - ./priv-config:/opt/config
#    networks:
#      - external_network
#      - internal_network

networks:
  external_network:
  internal_network:
    external:
      name: lan
